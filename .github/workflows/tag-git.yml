name: tag-git

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Optionally override which branch to build'
        required: false
        default: main
      repository:
        description: 'Optionally override from where to fetch the specified ref'
        required: false
        default: git-for-windows/git

env:
  GPG_OPTIONS: "--batch --yes --no-tty --list-options no-show-photos --verify-options no-show-photos --pinentry-mode loopback"
  HOME: "${{github.workspace}}\\home"
  USERPROFILE: "${{github.workspace}}\\home"
  REPOSITORY: "${{github.event.inputs.repository}}"
  REF: "${{github.event.inputs.ref}}"
  NODEJS_VERSION: 16

jobs:
  tag-git:
    runs-on: ubuntu-latest
    steps:
      - name: Configure user
        run:
          USER_NAME="${{github.actor}}" &&
          USER_EMAIL="${{github.actor}}@users.noreply.github.com" &&
          mkdir "$HOME" &&
          git config --global user.name "$USER_NAME" &&
          git config --global user.email "$USER_EMAIL" &&
          echo "PACKAGER=$USER_NAME <$USER_EMAIL>" >> $GITHUB_ENV
      - name: Clone build-extra
        run: git clone --single-branch -b main https://github.com/git-for-windows/build-extra $RUNNER_TEMP/build-extra
      - name: Prepare home directory for GPG signing
        if: env.GPGKEY != ''
        run: |
          echo '${{secrets.PRIVGPGKEY}}' | tr % '\n' | gpg $GPG_OPTIONS --import &&
          mkdir -p home &&
          git config --global gpg.program "$RUNNER_TEMP/build-extra/gnupg-with-gpgkey.sh" &&
          info="$(gpg --list-keys --with-colons "${GPGKEY%% *}" | cut -d : -f 1,10 | sed -n '/^uid/{s|uid:||p;q}')" &&
          git config --global user.name "${info% <*}" &&
          git config --global user.email "<${info#*<}"
        env:
          GPGKEY: ${{secrets.GPGKEY}}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODEJS_VERSION}}
      - name: Generate bundle artifacts
        env:
          GPGKEY: ${{secrets.GPGKEY}}
        run: |
          mkdir -p bundle-artifacts &&
          git -c init.defaultBranch=main init --bare &&
          git remote add -f origin https://github.com/git-for-windows/git &&
          git fetch "https://github.com/$REPOSITORY" "$REF:$REF" &&
          tag_name="$(git describe --match 'v[0-9]*' FETCH_HEAD)" &&
          echo "prerelease-${tag_name#v}" >bundle-artifacts/ver &&
          echo "${tag_name#v}" >bundle-artifacts/display_version &&
          echo "$tag_name" >bundle-artifacts/next_version &&
          git tag $(test -z "$GPGKEY" || echo " -s") -m "Snapshot build" "$tag_name" FETCH_HEAD &&
          git bundle create bundle-artifacts/git.bundle origin/main.."$tag_name" &&
          release_note=$(git show -s  --pretty='tformat:%h (%s, %ad)' --date=short FETCH_HEAD) &&
          cd $RUNNER_TEMP/build-extra &&
          node ./add-release-note.js --commit feature "Snapshot of $release_note" &&
          git bundle create "$GITHUB_WORKSPACE/bundle-artifacts/build-extra.bundle" origin/main..main
      - name: 'Publish Pipeline Artifact: bundle-artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: bundle-artifacts
          path: ${{ github.workspace }}/bundle-artifacts
